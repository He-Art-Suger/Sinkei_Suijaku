import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class Client extends JFrame implements MouseListener
{
	private SS ss;// 神経衰弱クラスのオブジェクト
	private Card card;
	private Player player;
	private static LoginInterface login;
	private int connectnum;
	private int port;
	private boolean connectflag;
	private Container c; // コンテナ
	private JLabel turnLabel; // 手番表示用ラベル
	private PrintWriter out;// データ送信用オブジェクト
	private Receiver receiver; // データ受信用オブジェクト
	
	//コンストラクタ
	Client(Card card, SS ss, Player player)
	{
		this.card = card;
		this.ss = ss;
		this.player = player;
		
		
		
		//String[][] board = ss.getBoard(); // getGridメソッドにより局面情報を取得
		
		// ウィンドウ設定
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ウィンドウを閉じる場合の処理
		setTitle("神経衰弱ゲーム");// ウィンドウのタイトル（暫定）
		setSize(800, 600);// ウィンドウのサイズを設定（暫定）
		c = getContentPane();// フレームのペインを取得
		// アイコン設定(画像ファイルをアイコンとして使う)
		c.setLayout(null);
		// 盤面の生成
		c.setVisible(true);
		
	}
	
	// サーバに接続するメソッド
	public boolean connectServer(String ipAddress, int port)
	{
		Socket socket = null;
		try
		{
			socket = new Socket(ipAddress, port); // サーバ(ipAddress, port)に接続
			out = new PrintWriter(socket.getOutputStream(), true); // データ送信用オブジェクトの用意

			// 受信用オブジェクトを用意
			// ここで、ハンデレベルと先手後手情報を受け取る
			receiver = new Receiver(socket);

			// 受信用オブジェクトのスレッドを起動する
			receiver.start();
			
			return true;
		}
		catch(UnknownHostException e)
		{
			System.err.println("ホストのIPアドレスが判定できません: " + e);
			return false;
		}
		catch(IOException e)
		{
			System.err.println("サーバ接続時にエラーが発生しました: " + e);
			return false;
		}
	}
	
	//情報の送受信を行う内部クラス
	class Receiver extends Thread
	{
		private InputStreamReader sisr; // 受信データ用文字ストリーム
		private BufferedReader br; // 文字ストリーム用のバッファ
		
			//コンストラクタ
			Receiver(Socket socket)
			{
				try
				{
					sisr = new InputStreamReader(socket.getInputStream()); // 受信したバイトデータを文字ストリームに
					br = new BufferedReader(sisr);// 文字ストリームをバッファリングする
				}
				catch (IOException e)
				{
					System.err.println("データ受信時にエラーが発生しました: " + e);
				}
			}

			// 内部クラス Receiverのrunメソッド
			public void run()
			{

				// 最初はハンデレベルと自分の色を受け取るための無限ループを行う
				try
				{
					// 手番情報を受け取るための無限ループ
					String myturninfo;
					int myturn;
					while (true)
					{
						myturninfo = br.readLine();// 受信データを一行分読み込む
						if (myturninfo != null)
						{// データを受信したら
							myturn = Integer.parseInt(myturninfo);
							System.out.println("クライアントは自分の手番が " + myturn + " 番目であると受信しました");
							player.setTurnNum(myturn);
							setVisible(true); // 対局画面を表示
							//login.setVisible(false); //ログイン画面の非表示
							break; // 無限ループを抜ける
						}

					}
				}
				catch (IOException e)
				{
					System.err.println("データ受信時にエラーが発生しました: " + e);
				}
				
				//WaitDisplay(TurnNum);

				// 盤面を更新
				UpdateDisplay();

				try
				{
					String inputLine;
					while (true)
					{// データを受信し続ける
						inputLine = br.readLine();// 受信データを一行分読み込む
						
						if (inputLine != null)
						{// データを受信したら
							
							if(inputLine.equals("disconnect"))
							{
								System.out.println("対戦相手の接続が切れました。");
								turnLabel.setForeground(Color.red);
								turnLabel.setText("対戦相手の接続が切れました。");
								//win();
								break;
							}
													
							receiveMessage(inputLine);// データ受信用メソッドを呼び出す
						}
					}
				}
				catch (IOException e)
				{
					System.err.println("データ受信時にエラーが発生しました: " + e);
				}
			}
		}
	
	public void WaitDisplay(int TurnNum)
	{
		// 自分が1番手の場合→ホスト
		if (TurnNum == 1)
		{
			//はじめるかどうか
		}
		// それ以外の手番場合
		else
		{
			//待機画面
		}
	}
	
	//盤面の更新
	public void UpdateDisplay()
	{
		
	}
	
	//結果画面
	public void ResultInterface()
	{
		
	}
	
	
	// サーバから操作情報を受信したときに使われるメソッドreceiveMessage
	public void receiveMessage(String msg)
	{
		System.out.println("サーバからメッセージ " + msg + " を受信しました"); // テスト用標準出力
	
	}
	
	// 内部クラスLogin
	class LoginInterface extends JFrame
	{
		
		Match match;
		Rules rules;
		Wait wait;
		Choice choice;

		String serverIP;
		int port;

		// 内部クラスLoginのコンストラクタ
		LoginInterface(String serverIP, int port)
		{
			// 引数を与える
			this.serverIP = serverIP;
			this.port = port;
			
			match = new Match("Match");
			rules = new Rules("Rules");
			wait = new Wait("Wait");
			choice = new Choice("Choice");
		}
		
		class Match extends JFrame
		{
			
		    JLabel label;
		    JComboBox combobox;
		    JTextField tf = new JTextField(16);
		    JLabel label2 = new JLabel("");
		    JButton b2 = new JButton("ログイン");
		    JButton b1 = new JButton("遊び方");

		    Match(String title)
		    {
		            super(title);
		            JPanel c = (JPanel)getContentPane();
		            
		            c.setLayout(null);
		            
		            c.setBackground(new Color(34,139,34));
		            
		            label = new JLabel("神経衰弱");
		            label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 60)));
		            label.setBounds(250,100,300,60);
		            label.setHorizontalAlignment(JLabel.CENTER);
		            c.add(label);
		            
		            label = new JLabel("          名前を入力してください");
		            label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 15)));
		            label.setBounds(200,240,400,40);
		            c.add(label);
		            
		            
		            tf.setBounds(230,300,300,30);
		            c.add(tf);
		            
		            
		            b1.setBounds(340,400,80,30);
		            b1.addActionListener(new myListener1());
		            c.add(b1);
		            
		            
		            b2.setBounds(330,450,100,30);
		            b2.addActionListener(new myListener2());
		            c.add(b2);
		            
		            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		            setVisible(true);
		            setSize(800, 600);
		    }
		    
		    public class myListener1 implements ActionListener
		    {
		    	public void actionPerformed(ActionEvent e)
		    	{
		            setVisible(false);
		            rules.setVisible(true);
		        }
		    }
		    
		    public class myListener2 implements ActionListener
		    {
		    	public void actionPerformed(ActionEvent e)
		    	{
		    		String cmd = tf.getText(); // テキストフィールドに入力されている文字列を取得

					// テキストフィールドに何も入力されていない場合
					if (cmd.equals("") == true)
					{
						// 専用のメッセージを表示
						label.setForeground(Color.red);
						label.setText("ログイン名が入力されていません");
					}
					// テキストフィールドに名前が入力されている場合
					else
					{
						player.setName(cmd);
						// サーバに繋がらなかった場合
						if(connectServer(serverIP, port) == false)
						{
							label.setForeground(Color.red);
							label.setText("接続に失敗しました。もう一度ログインしてください。");
						}
						else
						{
							setVisible(false);
							wait.setVisible(true);
						}
					}
		        }
		    }
		}
		
		class Rules extends JFrame
		{
			
		    JLabel label;
		    JButton b1 = new JButton("ログイン画面に戻る");

		    Rules(String title)
		    {
		            super(title);
		            JPanel c = (JPanel)getContentPane();
		            
		            c.setLayout(null);
		            
		            c.setBackground(new Color(34,139,34));
		            
		            label = new JLabel("遊び方（ルール説明）");
		            label.setBounds(150,40,550,100);
		            label.setFont(new Font("ＭＳ ゴシック", Font.BOLD, 50));
		            label.setHorizontalAlignment(JLabel.CENTER);
		            label.setForeground(Color.white);
		            c.add(label);
		            
		            label = new JLabel("<html>ここに特殊カードの説明を入れる。<br>"
		            		+ "2枚揃うと機能が発動する。");
		            label.setBounds(200,100,500,200);
		            label.setFont(new Font("ＭＳ ゴシック", Font.PLAIN, 20));
		            label.setForeground(Color.white);
		            c.add(label);
		            
		            
		            label = new JLabel("<html>・シャッフルカード – カードの位置を入れ替える<br>"
		            		+ "・スペシャルカード – 得点が〇倍になる<br>"
		            		+ "・リバースカード – 対戦の順序が逆回りになる<br>"
		            		+ "・スキップカード – 次の人を飛ばして対戦が進む<br>"
		            		+ "・持ちカード交換 – 取得カードを交換する<br>"
		            		+ "");
		            label.setBounds(200,250,400,200);
		            label.setFont(new Font("ＭＳ ゴシック", Font.PLAIN, 17));
		            label.setHorizontalAlignment(JLabel.CENTER);
		            label.setForeground(Color.white);
		            c.add(label);
		            
		            
		            b1.setBounds(250,450,300,50);
		            b1.setFont(new Font("ＭＳ ゴシック", Font.PLAIN, 20));
		            b1.addActionListener(new myListener1());
		            c.add(b1);
		            
		            
		            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		            setSize(800, 600);
		    }
		    
		    public class myListener1 implements ActionListener
		    {
		    	public void actionPerformed(ActionEvent e)
		    	{
		    		setVisible(false);
		            match.setVisible(true);
		        }
		    }
		    
		}

		public class Wait extends JFrame
		{
			
			JLabel label;
			JButton b1 = new JButton("始める");
			
			public Wait(String title)
			{
				super(title);
				
				int num = 1;
				
				JPanel c = (JPanel)getContentPane();
				
				c.setLayout(null);
				
				c.setBackground(new Color (34, 139, 34));
				
				label = new JLabel("神経衰弱");
				label.setBounds(270, 50, 260, 150);
				label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 60)));
				c.add(label);
				
				label = new JLabel("現在の接続人数:"+ num +"人");
				label.setBounds(250, 180, 300, 100);
				label.setHorizontalAlignment(JLabel.CENTER);
				label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 30)));
				c.add(label);
				
				label = new JLabel("対戦相手を探しています");
				label.setBounds(200, 270, 400, 100);
				label.setHorizontalAlignment(JLabel.CENTER);
				label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 30)));
				c.add(label);
				
				label = new JLabel("このまま追加メンバーを待ちますか？");
				label.setBounds(150, 320, 500, 100);
				label.setHorizontalAlignment(JLabel.CENTER);
				label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 20)));
				c.add(label);
				
				b1.setBounds(350, 430, 100, 50);
				b1.addActionListener(new myListener1());
				c.add(b1);
				
				setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				setSize(800, 600);
			}
			
			public class myListener1 implements ActionListener
			{
				public void actionPerformed(ActionEvent e)
				{
					setVisible(false);
		    		choice.setVisible(true);
				}
			}

		}
		
		class Choice extends JFrame
		{
			
		    JLabel label;
		    JLabel label2 = new JLabel("");
		    JButton []b1 = new JButton[3];
		    {
		    	b1[0] = new JButton("弱い");
		    	b1[1] = new JButton("弱い");
		    	b1[2] = new JButton("弱い");
		    }
		    JButton []b2 = new JButton[3];
		    {
			    b2[0] = new JButton("ふつう");
				b2[1] = new JButton("ふつう");
				b2[2] = new JButton("ふつう");
		    }
		    JButton []b3 = new JButton[3];
		    {
			    b3[0] = new JButton("強い");
				b3[1] = new JButton("強い");
				b3[2] = new JButton("強い");
		    }
		    JButton b4 = new JButton("決定");

		    Choice(String title)
		    {
		            super(title);
		            JPanel c = (JPanel)getContentPane();
		            
		            c.setLayout(null);
		            c.setBackground(new Color(34,139,34));
		            
		            label = new JLabel("CPUのレベルを決めてください");
		            label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 40))); 
		            label.setBounds(120,80,600,40);
		            c.add(label);
		            
		            int i;
		            
		            for(i = 0; i <= 2; i++)
		            {
			            label = new JLabel("CPU" + (i + 1));
			            label.setFont((new Font(Font.DIALOG_INPUT, Font.BOLD, 40))); 
			            label.setBounds(130,200+(i)*80,300,40);
			            c.add(label);
			            
			            b1[i].setBounds(260,200+(i)*80,80,40);
			            b1[i].addActionListener(new myListener1());
			            c.add(b1[i]);
			            
			            b2[i].setBounds(390,200+(i)*80,80,40);
			            b2[i].addActionListener(new myListener1());
			            c.add(b2[i]);
			            
			            b3[i].setBounds(520,200+(i)*80,80,40);
			            b3[i].addActionListener(new myListener1());
			            c.add(b3[i]);
		            }
		            
		            
		            b4.setBounds(350,480,100,40);
		            b4.addActionListener(new myListener1());
		            c.add(b4);
		            
		            
		            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		            setSize(800, 600);
		    }

		    public class myListener1 implements ActionListener
		    {
		    	public void actionPerformed(ActionEvent e)
		    	{
		    		
		        }
		    }
		    
		}
		
		
		/*
		// true を与えるとボタンが押せるようになり、false を与えるとボタンを押せなくなるメソッド
		public void allEnabled(boolean f)
		{
			nameTF.setEditable(f);
			nameButton.setEnabled(f);
			okButton.setEnabled(f);
			handCombobox.setEnabled(f);
		}
		*/
		
		
	}
	
	// マウスクリック時の処理
	public void mouseClicked(MouseEvent e)
	{
		JButton theButton = (JButton) e.getComponent();// クリックしたオブジェクトを得る．キャストを忘れずに
		String command = theButton.getActionCommand();// ボタンの名前を取り出す
		System.out.println("マウスがクリックされました。押されたボタンは " + command + "です。");
		
		/*
		// 自分の手番かつ、クリックしたマスにコマを置くことのできる場合 → 盤面情報を更新し、操作情報をサーバへ送る
		if (((player.getColor().equals(game.getTurn())) == true))
		{
			if(game.putStone(Integer.parseInt(command), game.getTurn()) == true)
			{
				// 盤面情報の更新
				UpdateDisplay();
		
				// 操作情報をサーバに送る
				sendMessage(command);
				
			}
			else if(game.putStone(Integer.parseInt(command), game.getTurn()) == false)
			{
				
				turnLabel.setForeground(Color.blue);
				turnLabel.setText("その場所に石を置くことはできません");
			}
		}
		*/
	}
	
	public void mouseEntered(MouseEvent e)
	{
		
	}// マウスがオブジェクトに入ったときの処理

	public void mouseExited(MouseEvent e)
	{
		
	}// マウスがオブジェクトから出たときの処理

	public void mousePressed(MouseEvent e)
	{
		
	}// マウスでオブジェクトを押したときの処理

	public void mouseReleased(MouseEvent e)
	{
		
	}// マウスで押していたオブジェクトを離したときの処理
	

	public static void main(String[] args)
	{
		// プレイヤオブジェクトの用意
		Player player = new Player();

		Card card = new Card();
		
		// オセロオブジェクトの用意
		SS ss = new SS(card);

		// クライアントオブジェクトの用意
		Client oclient = new Client(card, ss, player); // 引数としてオセロオブジェクト、プレイヤオブジェクトを渡す

		// Login オブジェクトの用意
		login = oclient.new LoginInterface(args[0], 10000);// サーバのIPアドレス、ポート番号を与える
	}

}
