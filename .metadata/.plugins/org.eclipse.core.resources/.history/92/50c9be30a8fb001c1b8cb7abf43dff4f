import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class Server
{
	private CPU []cpu = new CPU[3];
	private int port; // サーバの待ち受けポート
	private boolean[] online = new boolean[4]; // 接続状態管理用配列
	private PrintWriter[] out = new PrintWriter[4]; // データ送信用オブジェクト
	private Receiver[] receiver = new Receiver[4]; // データ受信用オブジェクト
	
	//コンストラクタ
	Server(int port)
	{
		this.port = port;
		online[0] = false; 
		online[1] = false;
		online[2] = false;
		online[3] = false;
	}
	
	//情報の送受信を行う内部クラス
	class Receiver extends Thread
	{
		private InputStreamReader sisr; // 受信データ用文字ストリーム
		private BufferedReader br; // 文字ストリーム用のバッファ
		private int TurnNum; // プレイヤ自身を識別するための番号（1～4）

		// 内部クラスReceiverのコンストラクタ
		Receiver(Socket socket, int TurnNum)
		{
			try
			{
				this.TurnNum = TurnNum; // プレイヤを識別するための番号を割り振る（1～4）
				online[TurnNum - 1] = true;
				sisr = new InputStreamReader(socket.getInputStream());
				br = new BufferedReader(sisr);
				System.out.println("クライアント" + TurnNum + " からデータを受信する準備ができました。");
				
				if(TurnNum == 1)
				{
					
				}
			}
			catch (IOException e)
			{
				System.err.println("データ受信時にエラーが発生しました: " + e);
				online[TurnNum - 1] = false;
			}
		}

		// 内部クラス Receiverのrunメソッド(start によりスレッドが動く)
		public void run()
		{
			try
			{
				System.out.println("サーバの、クライアント" + TurnNum +"からデータを受信するスレッドが動きました");
				String inputLine;
				while (true)
				{// データを受信し続ける
					inputLine = br.readLine();// データを一行分読み込む
					
					if(inputLine.equals("GameSet"))
					{	//ゲーム終了のメッセージを受け取ったら
						System.out.println("クライアント" + TurnNum + "からメッセージGameSetが届きました．クライアントとの接続を切ります.");
						// 接続状態をfalseにする
						online[TurnNum - 1] = false;
						// データ受信ストリームを閉じる（br, sisr は内部クラスReceiver のフィールド）
						br.close();
						sisr.close();
						//ループを抜けてThreadを終了
						break;
					}
					
					if (inputLine != null)
					{ // データを受信したら
						System.out.println("クライアント" + TurnNum + "からメッセージ " + inputLine + " が届きました．他のクライアントへ転送します.");
						for(int i = 0; i < 4; i++)
						{
							out[i].println(inputLine); // 受信データを対戦相手クライアントのバッファに書き出す
							out[i].flush(); // 受信データを対戦相手へ転送する
						}
					}
				}
			}
			catch (IOException e)
			{ // 接続が切れたとき
				System.err.println("クライアント" + TurnNum + "との接続が切れました．");
				online[TurnNum - 1] = false;
				// 対戦相手へ文字列 "disconnect" を転送する
				for(int i = 0; i < 4; i++)
				{
					out[i].println("disconnect"); // 受信データを対戦相手クライアントのバッファに書き出す
					out[i].flush(); // 受信データを対戦相手へ転送する
				}
			}
		}
	}
	
	public void Timelimit()
	{
		
	}
	
	// 2つのクライアントの接続を行う(サーバを起動する)メソッド acceptClient
	public void acceptClient()
	{
		try
		{
			System.out.println("サーバが起動しました．");
			ServerSocket ss = new ServerSocket(port); // サーバソケットを用意
			Socket []socket = new Socket[4];
			
			// クライアントと接続
			for(int i = 0; i < 4; i++)
			{
				socket[i] = ss.accept(); // クライアントから新規接続を受け付けるまでプログラムは停止
				System.out.println("クライアント" + (i + 1) + "と接続しました．");
				out[i] = new PrintWriter(socket[i].getOutputStream(), true);// データ送信オブジェクトを用意
				receiver[i] = new Receiver(socket[i], i + 1);// データ受信オブジェクト(スレッド)を用意
			}
			
		
			for(int i = 0; i < 4; i++)
			{
				receiver[i].start(); // クライアントからのデータ送信オブジェクト(スレッド)を起動
			}
			
			for(int i = 0; i < 4; i++)
			{
				receiver[i].join();	//receiverのすべてのThreadが終わるまで待機。
			}
			
			//ソケットを閉じる
			for(int i = 0; i < 4; i++)
			{
				socket[i].close();
			}
			
			ss.close();
			
			//サーバのオブジェクトを初期化し、クライアントと再接続を行う
			//reset();

		}
		catch (Exception e)
		{
			System.err.println("ソケット作成時にエラーが発生しました: " + e);
		}
	}
	
	
	public static void main(String[] args)
	{
		Server server = new Server(10000); // 待ち受けポート10000番でサーバオブジェクトを準備
		server.acceptClient(); // クライアント受け入れを開始
	}

}
